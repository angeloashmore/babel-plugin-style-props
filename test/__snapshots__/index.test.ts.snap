// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kitchen sink handles a large amount of scale and style props 1`] = `
"const Example = () => {
  const array = ['l', 'l', 'm', 'm', 'xl'];
  const variable = 'huge';
  return <div display='flex' mScale={array} fontSize={['1rem', '2rem', null, '3rem']} color='green' colorHover='red' colorFocus={['red', 'green', 'blue']} lineHeight={1.5} pyScale={['l', null, 'xxl']} textTransform='uppercase' fontFamily='system-ui' maxWidth={variable} __styleProps__={{
    css: {
      base: [{
        display: 'flex',
        fontSize: '1rem',
        color: 'green',
        lineHeight: 1.5,
        textTransform: 'uppercase',
        fontFamily: 'system-ui',
        maxWidth: variable
      }, {
        fontSize: '2rem'
      }, {}, {
        fontSize: '3rem'
      }],
      hover: [{
        color: 'red'
      }],
      focus: [{
        color: 'red'
      }, {
        color: 'green'
      }, {
        color: 'blue'
      }],
      active: [{}]
    },
    extensions: {
      scales: {
        margin: [array],
        paddingTop: ['l', null, 'xxl'],
        paddingBottom: ['l', null, 'xxl']
      },
      variants: {}
    }
  }} />;
};"
`;

exports[`modifiers handles modifier props 1`] = `
"const Example = () => {
  return <div color='red' colorHover='blue' colorFocus='green' colorActive='purple' __styleProps__={{
    css: {
      base: [{
        color: 'red'
      }],
      hover: [{
        color: 'blue'
      }],
      focus: [{
        color: 'green'
      }],
      active: [{
        color: 'purple'
      }]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`modifiers handles responsive modifier props 1`] = `
"const Example = () => {
  return <div colorHover={['red', null, 'green']} __styleProps__={{
    css: {
      base: [{}],
      hover: [{
        color: 'red'
      }, {}, {
        color: 'green'
      }],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`modifiers supports merging with an existing __styleProps__ with modifier props 1`] = `
"const Example = () => {
  const color = 'red';
  return <div m='3rem' mHover='4rem' mFocus={['5rem', '6rem']} mActive={['6rem', '7rem', null, '8rem']} __styleProps__={{
    css: {
      base: [{
        color: 'red',
        margin: '3rem'
      }],
      hover: [{
        color: 'blue',
        margin: '4rem'
      }],
      focus: [{
        color: 'purple',
        margin: '5rem'
      }, {
        margin: '6rem'
      }],
      active: [{
        color: 'green',
        margin: '6rem'
      }, {
        margin: '7rem'
      }, {}, {
        margin: '8rem'
      }]
    },
    extensions: {
      scales: {
        padding: ['xl']
      }
    }
  }} />;
};"
`;

exports[`modifiers supports variable usage in modifier props 1`] = `
"const Example = () => {
  const color = 'red';
  return <div colorHover={[color, null, 'green']} __styleProps__={{
    css: {
      base: [{}],
      hover: [{
        color: color
      }, {}, {
        color: 'green'
      }],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`scale prop parsing handles responsive scale props 1`] = `
"const Example = () => {
  return <div mScale={['l', null, 'm']} __styleProps__={{
    css: {
      base: [{}],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {
        margin: ['l', null, 'm']
      },
      variants: {}
    }
  }} />;
};"
`;

exports[`scale prop parsing handles scale props 1`] = `
"const Example = () => {
  return <div mScale='l' __styleProps__={{
    css: {
      base: [{}],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {
        margin: ['l']
      },
      variants: {}
    }
  }} />;
};"
`;

exports[`scale prop parsing handles variable arrays in scale props 1`] = `
"const Example = () => {
  const array = ['l', 'l', 'm', 'm', 'xl'];
  return <div mScale={array} __styleProps__={{
    css: {
      base: [{}],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {
        margin: [array]
      },
      variants: {}
    }
  }} />;
};"
`;

exports[`scale prop parsing merges scale props with an existing __styleProps__ prop 1`] = `
"const Example = () => {
  return <div mScale='l' __styleProps__={{
    css: {
      base: [{
        color: 'red'
      }],
      hover: [{
        color: 'blue'
      }],
      focus: [{
        color: 'purple'
      }],
      active: [{
        color: 'green'
      }]
    },
    extensions: {
      scales: {
        padding: ['xl'],
        margin: ['l']
      }
    }
  }} />;
};"
`;

exports[`style prop parsing does not strip non style props if \`shouldStrip\` is set 1`] = `
"const Example = () => {
  return <div shouldNotStrip={true} __styleProps__={{
    css: {
      base: [{
        padding: '1rem'
      }, {
        padding: '2rem'
      }, {
        padding: '3rem'
      }, {
        padding: '4rem'
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`style prop parsing handles expressions in style props 1`] = `
"const Example = ({
  isTest
}) => {
  return <div m={isTest ? '3rem' : '4rem'} __styleProps__={{
    css: {
      base: [{
        margin: isTest ? '3rem' : '4rem'
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`style prop parsing handles responsive style props 1`] = `
"const Example = () => {
  return <div m={['3rem', '4rem']} display='grid' pt={[null, '4rem', null, '6rem']} __styleProps__={{
    css: {
      base: [{
        margin: '3rem',
        display: 'grid'
      }, {
        margin: '4rem',
        paddingTop: '4rem'
      }, {}, {
        paddingTop: '6rem'
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`style prop parsing handles style props and places them in a new prop 1`] = `
"const Example = () => {
  return <div m='3rem' lineHeight={1.5} __styleProps__={{
    css: {
      base: [{
        margin: '3rem',
        lineHeight: 1.5
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`style prop parsing handles style props on multiple elements 1`] = `
"const Example = () => {
  return <div m='1rem' __styleProps__={{
    css: {
      base: [{
        margin: '1rem'
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }}>
            <span p='2rem' __styleProps__={{
      css: {
        base: [{
          padding: '2rem'
        }],
        hover: [{}],
        focus: [{}],
        active: [{}]
      },
      extensions: {
        scales: {},
        variants: {}
      }
    }} />
          </div>;
};"
`;

exports[`style prop parsing handles variable usage in style props 1`] = `
"const Example = ({
  size
}) => {
  const variable = '3rem';

  const myFunction = () => '4rem';

  return <div m={[variable, size, myFunction()]} __styleProps__={{
    css: {
      base: [{
        margin: variable
      }, {
        margin: size
      }, {
        margin: myFunction()
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;

exports[`style prop parsing merges parsed props with an existing __styleProps__ prop 1`] = `
"const Example = () => {
  return <div p={['1rem', '2rem', '3rem', '4rem']} __styleProps__={{
    css: {
      base: [{
        color: 'red',
        padding: '1rem'
      }, {
        padding: '2rem'
      }, {
        padding: '3rem'
      }, {
        padding: '4rem'
      }],
      hover: [{
        color: 'blue'
      }],
      focus: [{
        color: 'purple'
      }],
      active: [{
        color: 'green'
      }]
    },
    extensions: {
      scales: {
        margin: ['xl']
      }
    }
  }} />;
};"
`;

exports[`style prop parsing strips style props if \`shouldStrip\` is set 1`] = `
"const Example = () => {
  return <div __styleProps__={{
    css: {
      base: [{
        padding: '1rem'
      }, {
        padding: '2rem'
      }, {
        padding: '3rem'
      }, {
        padding: '4rem'
      }],
      hover: [{}],
      focus: [{}],
      active: [{}]
    },
    extensions: {
      scales: {},
      variants: {}
    }
  }} />;
};"
`;
